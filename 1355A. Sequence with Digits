//https://codeforces.com/contest/1355/problem/A


#include<bits/stdc++.h>
using namespace std;

#define endl '\n'
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#define MOD 1e9+7
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
typedef long long int ll;
typedef tree< ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update > ordered_set;
/// cout<<*X.find_by_order(1)<<endl; // finds the kth element
/// cout<<X.order_of_key(-5)<<endl;  // number of items in a set that are strictly smaller than our item

int dx[] = {0, 0, +1, -1, +1, +1, -1, -1};
int dy[] = {+1, -1, 0, 0, +1, -1, +1, -1};

const int mx = 1e5+5;




int main()
{
    optimize();

    int tc; cin>>tc;
    while(tc--){

        ll num, k; cin>>num>>k;
        for(int i=2; i<=k; i++){
            ll temp = num;
            ll minDigit = 9, maxDigit = 0;

            while(temp > 0){
                minDigit = min(minDigit, temp%10);
                maxDigit = max(maxDigit, temp%10);
                temp /= 10;
            }

            if(minDigit == 0)break;
            num += (minDigit * maxDigit);
        }

        cout<<num<<endl;
    }

    return 0;
}
